name: 'publish'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      APP_VERSION: ${{ steps.get-version.outputs.APP_VERSION }}
      RELEASE_BODY: ${{ steps.get-changelog.outputs.RELEASE_BODY }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Get build version
        shell: bash
        id: get-version
        run: |
          TAG="${GITHUB_REF#refs/*/}"
          if [[ "$TAG" != v* ]]; then
            echo "::error::Tag must start with v (e.g. v1.2.3), got: $TAG"
            exit 1
          fi
          echo "APP_VERSION=$TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: get-changelog
        run: |
          CHANGELOG_BODY=$(npx changelogithub --draft --name ${{ steps.vars.outputs.tag }})
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-app:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'

          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            target: 'i686-pc-windows-msvc'
            args: '--target i686-pc-windows-msvc'
            allow_failure: true
          - platform: 'windows-latest'
            target: 'aarch64-pc-windows-msvc'
            args: '--target aarch64-pc-windows-msvc'
            allow_failure: true

          - platform: 'ubuntu-22.04'
            target: 'x86_64-unknown-linux-gnu'
            args: '--target x86_64-unknown-linux-gnu'
            allow_failure: true
          - platform: 'ubuntu-22.04-arm'
            target: 'aarch64-unknown-linux-gnu'
            args: '--target aarch64-unknown-linux-gnu'
            allow_failure: true
    env:
      APP_VERSION: ${{ needs.create-release.outputs.APP_VERSION }}

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: latest
      - uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils

      - name: Add Rust build target
        working-directory: src-tauri
        shell: bash
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }} || true

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: src-tauri/target

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: pnpm

      - name: Install app dependencies and build web
        run: pnpm install --frozen-lockfile

      - name: Build the Anda AI App at ${{ matrix.platform}} for ${{ matrix.target }} @ ${{ env.APP_VERSION }}
        uses: tauri-apps/tauri-action@v0
        env:
          CI: false
          PLATFORM: ${{ matrix.platform }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ''
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ''
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          # appVersion: ${{ env.APP_VERSION }} // not work
          tagName: ${{ github.ref_name }}
          releaseName: Anda AI App ${{ env.APP_VERSION }}
          releaseBody: '${{ needs.create-release.outputs.RELEASE_BODY }}'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
