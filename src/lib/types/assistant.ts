export type Principal = string
export type Xid = string

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json }
  | Json[]

export interface ChatMessage {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: number
}

export interface Message {
  role: 'system' | 'user' | 'assistant' | 'tool'

  /// The content of the message, can be text or JSON array.
  content: Json

  /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
  name?: string

  /// Tool call that this message is responding to. If this message is a response to a tool call, this field should be set to the tool call ID.
  tool_call_id?: string

  timestamp?: number
}

export interface Conversation {
  /// The unique identifier for this resource in the Anda DB collection "conversation".
  _id: number

  user: Principal

  thread?: Xid

  messages: Message[]

  /// The request resources used by the agent to process the conversation.
  resources: Resource[]

  /// A collection of artifacts generated by the agent during the execution of the task.
  artifacts: Resource[]

  /// The state of the conversation.
  status: 'submitted' | 'working' | 'completed' | 'canceled' | 'failed'

  /// The period when the conversation was created, in hours (timestamp / 3600 / 1000).
  /// It is used to index the conversation for faster retrieval by time.
  period: number

  /// The timestamp when the conversation was created, in milliseconds.
  created_at: number

  /// The timestamp when the conversation was updated, in milliseconds.
  updated_at: number
}

export function toChatMessages(conversation: Conversation): ChatMessage[] {
  const res: ChatMessage[] = []
  for (let i = 0; i < conversation.messages.length; i++) {
    const message = conversation.messages[i]
    if (
      !message.content ||
      message.name == '$system' ||
      (message.role != 'user' && message.role != 'assistant')
    ) {
      continue
    }

    res.push({
      id: `${conversation._id}:${i}`,
      content:
        typeof message.content === 'string'
          ? message.content
          : JSON.stringify(message.content), // TODO
      role: message.role,
      timestamp: message.timestamp || conversation.created_at
    })
  }
  return res
}

export interface KIPLogs {
  /// The unique identifier for this resource in the Anda DB collection "kip_logs".
  _id: number

  user: Principal

  command: 'KQL' | 'KML' | 'META' | 'UNKNOWN'

  request: Record<string, Json>

  response: Record<string, Json>

  conversation?: number

  period: number

  timestamp: number
}

/**
 * 通用键值元数据映射
 */
export type MetadataMap = Record<string, Json>

/**
 * 资源对象（anda_db_schema::Resource）
 * Rust: #[serde(skip_serializing_if = "Option::is_none")] => 序列化缺省时可被省略，因此在 TS 中用可选属性表示
 */
export interface Resource {
  /** 唯一 ID，0 表示待创建 */
  _id: number
  /** 标签列表，如 text / image / audio / video 等 */
  tags: string[]
  /** 资源名称 */
  name: string
  /** 描述 */
  description?: string
  /** 资源 URI（例如远程地址或引用） */
  uri?: string
  /** MIME 类型 */
  mime_type?: string
  /** 二进制数据（base64），提交创建时可带；返回常被清空以节省体积 */
  blob?: Uint8Array
  /** 字节大小 */
  size?: number
  /** SHA3-256 哈希（base64） */
  hash?: Uint8Array
  /** 自定义元数据（包含 user, created_at 等） */
  metadata?: MetadataMap
}

/**
 * Represents a request to an agent for processing.
 */
export interface AgentInput {
  /** agent name, use default agent if empty. */
  name: string
  /** agent prompt or message. */
  prompt: string
  /** The resources to process by the agent. */
  resources?: Resource[]
  /** The metadata for the agent request */
  meta?: RequestMeta
}

/**
 * Represents the output of an agent execution.
 */
export interface AgentOutput {
  /** The output content from the agent, may be empty. */
  content: string
  /** The usage statistics for the agent execution. */
  usage: Usage
  /**
   * Indicates failure reason if present, None means successful execution.
   * Should be None when finish_reason is "stop" or "tool_calls".
   */
  failed_reason?: string
  /** Tool calls returned by the LLM function calling. */
  tool_calls?: ToolCall[]

  /** A collection of artifacts generated during execution. */
  artifacts?: Resource[]
  /** The conversation ID. */
  conversation?: number
}

/**
 * Represents a request to a tool for processing.
 */
export interface ToolInput<TArgs = Json> {
  /** tool name. */
  name: string
  /** arguments in JSON format. */
  args: TArgs
  /** The resources to process by the tool. */
  resources?: Resource[]
  /** The metadata for the tool request. */
  meta?: RequestMeta
}

/**
 * Represents the output of a tool execution.
 */
export interface ToolOutput<TOut = Json> {
  /** The output from the tool. */
  output: TOut
  /** A collection of artifacts generated by the tool execution. */
  artifacts?: Resource[]
  /** The usage statistics for the tool execution. */
  usage: Usage
}

/**
 * Represents the metadata for an agent or tool request.
 */
export interface RequestMeta {
  /** The target engine principal for the request. */
  engine?: Principal
  /** The target threaded conversation for the request. */
  thread?: Xid
  /**
   * Gets the username from request context.
   * Note: Not verified, do not treat as trusted identifier.
   */
  user?: string
}

/**
 * Represents the usage statistics for the agent or tool execution.
 */
export interface Usage {
  /** input tokens sent to the LLM */
  input_tokens: number
  /** output tokens received from the LLM */
  output_tokens: number
  /** number of requests made to agents and tools */
  requests: number
}

/**
 * Represents a tool call response with its ID, function name, and arguments.
 */
export interface ToolCall {
  /** tool call id. */
  id: string
  /** tool function name. */
  name: string
  /** tool function arguments (JSON serialized string). */
  args: string
  /** The result of the tool call, if available. */
  result?: Json
}

/**
 * Represents a function definition with its metadata.
 */
export interface Function {
  /** Definition of the function. */
  definition: FunctionDefinition
  /** The tags of resource that this function supports. */
  supported_resource_tags: string[]
}

/**
 * Defines a callable function with its metadata and schema.
 */
export interface FunctionDefinition {
  /** Name of the function. */
  name: string
  /** Description of what the function does. */
  description: string
  /** JSON schema defining the function's parameters. */
  parameters: Json
  /**
   * Enable strict schema adherence (subset of JSON Schema only).
   * If true the model should follow the exact schema.
   */
  strict?: boolean
}

export interface AgentInfo {
  /// Unique account identifier of the agent.
  handle: String

  /// The dMsg.net canister where the agent profile is stored.
  handle_canister?: Principal

  /// Human readable name of the agent.
  /// (e.g. "Anda ICP")
  name: String

  /// A human-readable description of the agent. Used to assist users and
  /// other agents in understanding what the agent can do.
  /// (e.g. "Agent that helps users with recipes and cooking.")
  description: string

  /// A endpoint URL for the agent. This is the URL that other agents and
  /// users will use to communicate with the agent.
  endpoint: string

  /// The protocols the agent supports. It is a map of protocol name to
  /// agent information.
  /// (e.g. "ANDA" => "https://DOMAIN/.well-known/agents/{agent_id}"，
  ///       "A2A" => "https://DOMAIN/.well-known/agent.json")
  protocols: Record<string, string>

  /// Payment protocols the agent supports.
  /// (e.g. ["X402"])
  payments: string[]
}

export interface EngineCard {
  /// The principal ID of the engine.
  id: Principal
  /// Information about the agent, including name, description, and supported protocols.
  info: AgentInfo
  /// Definitions for agents in the engine.
  agents: Function[]
  /// Definitions for tools in the engine.
  tools: Function[]
}

/**
 * MemoryToolArgs - 会话/日志相关 API 参数
 */
export type MemoryToolArgs =
  | {
      /** Get a conversation by ID */
      _type: 'GetConversation'
      /** The ID of the conversation to get */
      _id: number
    }
  | {
      /** List previous conversations */
      _type: 'ListPrevConversations'
      /** The cursor for pagination */
      cursor?: string
      /** The limit for pagination, default to 10 */
      limit?: number
    }
  | {
      /** Search conversations */
      _type: 'SearchConversations'
      /** The query string to search */
      query: string
      /** The max number of conversations to return, default to 10 */
      limit?: number
    }
  | {
      /** List KIP logs */
      _type: 'ListKipLogs'
      /** The cursor for pagination */
      cursor?: string
      /** The limit for pagination, default to 10 */
      limit?: number
    }

export interface ErrorObject {
  name: string
  message: string
  data?: Json
}

export interface Response<T> {
  result?: T
  next_cursor?: string
  error?: ErrorObject
}
